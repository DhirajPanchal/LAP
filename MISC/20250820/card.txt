"use client";

import * as React from "react";
import { cn } from "@/lib/utils";
import { TrendingUp, CheckCircle2, Clock9, XCircle } from "lucide-react";

type Tone = "neutral" | "indigo" | "blue" | "teal" | "amber" | "red";

type Props = {
  title: string;
  value: string | number;
  subtext?: string;
  icon?: React.ReactNode;
  tone?: Tone;           // controls the subtle card wash (not the icon)
  selected?: boolean;    // shows indigo-200 glow even without hover
  disabled?: boolean;
  onSelect?: () => void;
  className?: string;
  "aria-label"?: string;
};

// very soft tone wash over a neutral card surface
const toneWash: Record<Tone, string> = {
  neutral:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.slate.400/.10),transparent_60%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.slate.300/.10),transparent_60%)]",
  indigo:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.indigo.400/.14),transparent_62%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.indigo.300/.12),transparent_62%)]",
  blue:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.sky.400/.14),transparent_62%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.sky.300/.12),transparent_62%)]",
  teal:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.teal.400/.14),transparent_62%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.teal.300/.12),transparent_62%)]",
  amber:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.amber.400/.16),transparent_62%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.amber.300/.12),transparent_62%)]",
  red:
    "before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.rose.400/.14),transparent_62%)] " +
    "dark:before:[background:radial-gradient(180px_140px_at_85%_20%,theme(colors.rose.300/.12),transparent_62%)]",
};

export function MetricSelectCardV5({
  title,
  value,
  subtext,
  icon,
  tone = "neutral",
  selected = false,
  disabled = false,
  onSelect,
  className,
  ...aria
}: Props) {
  return (
    <button
      type="button"
      disabled={disabled}
      aria-pressed={selected}
      onClick={onSelect}
      data-selected={selected}
      className={cn(
        "group relative w-full overflow-hidden rounded-2xl p-5 text-left",
        // neutral vertical surface + blur
        "bg-[linear-gradient(180deg,rgba(255,255,255,0.92),rgba(255,255,255,0.78))] " +
          "dark:bg-[linear-gradient(180deg,rgba(15,23,42,0.72),rgba(15,23,42,0.60))] backdrop-blur",
        // tone wash (top-right)
        "before:absolute before:inset-0 before:-z-10 before:rounded-2xl",
        toneWash[tone],
        // bottom vignette (no border)
        "after:absolute after:inset-x-0 after:bottom-0 after:h-10 after:-z-10 " +
          "after:bg-[linear-gradient(0deg,rgba(2,6,23,0.05),transparent)] " +
          "dark:after:bg-[linear-gradient(0deg,rgba(255,255,255,0.06),transparent)]",
        // base depth (borderless)
        "shadow-[0_1px_1px_rgba(2,6,23,0.04),0_10px_30px_rgba(2,6,23,0.06)] " +
          "dark:shadow-[0_1px_1px_rgba(0,0,0,0.35),0_8px_24px_rgba(0,0,0,0.35)]",
        // hover depth
        "transition-all duration-200 outline-none hover:shadow-[0_6px_20px_rgba(2,6,23,0.10)] " +
          "dark:hover:shadow-[0_6px_20px_rgba(0,0,0,0.55)] active:scale-[0.997]",
        // keyboard focus (keeps glow vibe)
        "focus-visible:shadow-[0_0_0_3px_rgba(99,102,241,0.35),0_10px_30px_rgba(2,6,23,0.10)] " +
          "dark:focus-visible:shadow-[0_0_0_3px_rgba(99,102,241,0.45),0_8px_24px_rgba(0,0,0,0.6)]",
        // *** selected glow — INDIGO-200 ***
        // base: visible at rest
        "data-[selected=true]:shadow-[0_0_0_3px_rgba(199,210,254,0.95),0_12px_36px_rgba(2,6,23,0.14)] " +
          "dark:data-[selected=true]:shadow-[0_0_0_3px_rgba(199,210,254,1),0_10px_30px_rgba(0,0,0,0.7)]",
        // hover on selected: stronger glow
        "data-[selected=true]:hover:shadow-[0_0_0_5px_rgba(199,210,254,1),0_14px_42px_rgba(2,6,23,0.18)] " +
          "dark:data-[selected=true]:hover:shadow-[0_0_0_5px_rgba(199,210,254,1),0_12px_36px_rgba(0,0,0,0.75)]",
        // click/active on selected: strongest glow
        "data-[selected=true]:active:shadow-[0_0_0_6px_rgba(199,210,254,1),0_10px_28px_rgba(2,6,23,0.22)] " +
          "dark:data-[selected=true]:active:shadow-[0_0_0_6px_rgba(199,210,254,1),0_10px_28px_rgba(0,0,0,0.8)]",
        disabled && "opacity-60 cursor-not-allowed",
        className
      )}
      {...aria}
    >
      <div className="flex items-start justify-between gap-3">
        <div className="min-w-0">
          <div className="text-sm font-medium text-slate-600 dark:text-slate-400">{title}</div>
          <div className="mt-1 text-[28px] leading-none font-semibold text-slate-900 dark:text-slate-50">
            {value}
          </div>
          {subtext ? (
            <div className="mt-2 text-xs text-slate-500 dark:text-slate-400">{subtext}</div>
          ) : null}
        </div>

        {/* bare icon — no bg/border */}
        {icon ? (
          <div className="shrink-0 text-slate-400 dark:text-slate-300 opacity-80 group-hover:opacity-100 transition-opacity">
            {icon}
          </div>
        ) : null}
      </div>
    </button>
  );
}

export const CardIcons = {
  total: <TrendingUp className="size-5" />,
  pending: <Clock9 className="size-5" />,
  approved: <CheckCircle2 className="size-5" />,
  rejected: <XCircle className="size-5" />,
};



"use client";

import * as React from "react";
import { CardIcons, MetricSelectCardV4 } from "./card3";
import { MetricSelectCardV5 } from "./card4";

type Key = "total" | "pending" | "approved" | "rejected";

export default function DashboardCards5() {
  const [selected, setSelected] = React.useState<Key>("approved");

  return (
    <div className="grid gap-4 sm:grid-cols-2 lg:grid-cols-4">
      <MetricSelectCardV5
        title="Total"
        value="3"
        subtext="All requests"
        icon={CardIcons.total}
        tone="indigo"
        selected={selected === "total"}
        onSelect={() => setSelected("total")}
        aria-label="Total"
      />
      <MetricSelectCardV5
        title="Pending Approval"
        value="1"
        subtext="Awaiting action"
        icon={CardIcons.pending}
        tone="blue"
        selected={selected === "pending"}
        onSelect={() => setSelected("pending")}
        aria-label="Pending Approval"
      />
      <MetricSelectCardV5
        title="Approved"
        value="2"
        subtext="Past 7 days"
        icon={CardIcons.approved}
        tone="teal"
        selected={selected === "approved"}
        onSelect={() => setSelected("approved")}
        aria-label="Approved"
      />
      <MetricSelectCardV5
        title="Rejected"
        value="0"
        subtext="Past 7 days"
        icon={CardIcons.rejected}
        tone="amber"
        selected={selected === "rejected"}
        onSelect={() => setSelected("rejected")}
        aria-label="Rejected"
      />
    </div>
  );
}
